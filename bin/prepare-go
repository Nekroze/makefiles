#!/usr/bin/env bash
set -euo pipefail

# Map fully-qualified module names to their directories so that protobuf import
# statements accept the fully-qualified name of the .proto files.
go list -f "--proto_path={{if .Dir}}{{ .Path }}={{ .Dir }}{{end}}" -m all

module=$(go list -m)

# Add options for protoc-gen-go.
echo "--go_opt=module=$module"
echo "--go_out=."

# Add options for protoc-gen-go-grpc.
echo "--go-grpc_opt=module=$module"
echo "--go-grpc_out=."
echo "--go-grpc_opt=require_unimplemented_servers=false"

# Find the version of google.golang.org/protobuf in go.mod so we can install the
# same version of the protoc-gen-go tool.
if version="$(go list -f '{{.Version}}' -m "google.golang.org/protobuf" 2> /dev/null)"; then
    1>&2 echo "found google.golang.org/protobuf@$version in go.mod"

# Otherwise, install the latest version.
else
    version=latest
    1>&2 echo "did not find google.golang.org/protobuf in go.mod, defaulting to latest version"
fi

export GOBIN="$MF_PROJECT_ROOT/artifacts/protobuf/bin"
1>&2 mkdir -p "$GOBIN"
1>&2 go get \
    "google.golang.org/protobuf/cmd/protoc-gen-go@$version" \
    "google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest"
