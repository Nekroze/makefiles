# Always run tests by default, even if other makefiles are included beforehand.
.DEFAULT_GOAL := test

# PROTO_FILES files is a space separated list of Protocol Buffers files that
# need to be built into Go files.
PROTO_FILES += $(shell find . -type f -name "*.proto")

# PROTO_GO_FILES is a space separated list of the Go source files that are built
# from the files in PROTO_FILES.
PROTO_GO_FILES += $(PROTO_FILES:.proto=.pb.go)

# GENERATED_FILES is a space separated list of files that are generated by the
# Makefile and are intended to be committed to the repository.
GENERATED_FILES += $(PROTO_GO_FILES)

# Disable CGO by default.
# See https://golang.org/cmd/cgo
CGO_ENABLED ?= 0

# Build matrix configuration.
#
# MATRIX_OS is a whitespace separated set of operating systems.
# MATRIX_ARCH is a whitespace separated set of CPU architectures.
#
# The build-matrix is constructed from all possible permutations of MATRIX_OS and
# MATRIX_ARCH. The default is to build only for the current OS and architecture.
_GOHOSTOS   := $(shell go env GOHOSTOS)
_GOHOSTARCH := $(shell go env GOHOSTARCH)
MATRIX_OS   ?= $(_GOHOSTOS)
MATRIX_ARCH ?= $(_GOHOSTARCH)

# Arguments passed to "go build" for debug / release builds.
DEBUG_ARGS   ?= -v
RELEASE_ARGS ?= -v -ldflags "-s -w" -tags release

################################################################################

_SRC   = $(shell find . -name '*.go')
_MAINS = $(notdir $(wildcard cmd/*))

_BINS_NIX = $(_MAINS)
_BINS_WIN = $(addsuffix .exe,$(_MAINS))
ifeq ($(_GOHOSTOS),windows)
_BINS_HOST = $(_BINS_WIN)
else
_BINS_HOST = $(_BINS_NIX)
endif

_MATRIX     = $(foreach OS,$(MATRIX_OS),$(foreach ARCH,$(MATRIX_ARCH),$(OS)/$(ARCH)))
_MATRIX_NIX = $(filter-out windows/%,$(_MATRIX))
_MATRIX_WIN = $(filter windows/%,$(_MATRIX))

_STEMS_NIX  = $(foreach M,$(_MATRIX_NIX),$(addprefix $(M)/,$(_BINS_NIX)))
_STEMS_WIN  = $(foreach M,$(_MATRIX_WIN),$(addprefix $(M)/,$(_BINS_WIN)))
_STEMS_HOST = $(addprefix $(_GOHOSTOS)/$(_GOHOSTARCH)/,$(_BINS_HOST))

_DEBUG_TARGETS   = $(addprefix artifacts/build/debug/,$(_STEMS_NIX) $(_STEMS_WIN))
_RELEASE_TARGETS = $(addprefix artifacts/build/release/,$(_STEMS_NIX) $(_STEMS_WIN))
_BUILD_TARGETS   = $(addprefix artifacts/build/debug/,$(_STEMS_HOST))

################################################################################

.PHONY: test
test: $(GENERATED_FILES)
	go test ./...

.PHONY: coverage
coverage: artifacts/coverage/index.html

.PHONY: coverage-open
coverage-open: artifacts/coverage/index.html
	open "$<"

.PHONY: prepare
prepare: test $(GENERATED_FILES)
	go fmt ./...
	go mod tidy

.PHONY: ci
ci: artifacts/coverage/cover.out
	@echo "checking for out-of-date generated files"
	@rm -f $(GENERATED_FILES)
	@make $(GENERATED_FILES)
	@git diff -- $(GENERATED_FILES)
	@!(git status --porcelain -- $(GENERATED_FILES) | grep .)

.PHONY: clean
clean::
	git check-ignore $$(find .) | xargs rm -vrf
	rm -f $(GENERATED_FILES)
	go clean -testcache

.PHONY: build
build: $(_BUILD_TARGETS)

.PHONY: regenerate
regenerate:
	rm -f $(GENERATED_FILES)
	make $(GENERATED_FILES)

.PHONY: debug
.SECONDARY: $(_DEBUG_TARGETS)
debug: $(_DEBUG_TARGETS)

.PHONY: release
.SECONDARY: $(_RELEASE_TARGETS)
release: $(_RELEASE_TARGETS)

################################################################################

%.pb.go: %.proto
	protoc --go_out=paths=source_relative,plugins=grpc:. $(@D)/*.proto

artifacts/coverage/index.html: artifacts/coverage/cover.out
	go tool cover -html="$<" -o "$@"

.PHONY: artifacts/coverage/cover.out # always rebuild
artifacts/coverage/cover.out: $(GENERATED_FILES)
	@mkdir -p $(@D)
	go test -covermode=count -coverprofile=$@ ./...

artifacts/build/%: $(GENERATED_FILES) $(_SRC)
	$(eval PARTS := $(subst /, ,$*))
	$(eval BUILD := $(word 1,$(PARTS)))
	$(eval OS    := $(word 2,$(PARTS)))
	$(eval ARCH  := $(word 3,$(PARTS)))
	$(eval BIN   := $(word 4,$(PARTS)))
	$(eval PKG   := $(basename $(BIN)))
	$(eval ARGS  := $(if $(findstring debug,$(BUILD)),$(DEBUG_ARGS),$(RELEASE_ARGS)))

	CGO_ENABLED=$(CGO_ENABLED) GOOS="$(OS)" GOARCH="$(ARCH)" go build $(ARGS) -o "$@" "./cmd/$(PKG)"
